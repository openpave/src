/**************************************************************************

	TEST.CPP - A test harness for OpenPave.org code.

	$OpenPave$

	The contents of this file are subject to the Academic Development
	and Distribution License Version 1.0 (the "License"); you may not
	use this file except in compliance with the License.  You should
	have received a copy of the License with this file.  If you did not
	then please contact whoever distributed this file too you, since
	they may be in violation of the License, and this may affect your
	rights under the License.

	Software distributed under the License is distributed on an "AS IS"
	basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
	the License for the specific language governing rights and
	limitations under the License.

	The Initial Developer of the Original Software is Jeremy Lea.

	Portions Copyright (C) 2006-2008 OpenPave.org.

	Contributor(s): Jeremy Lea <reg@openpave.org>.

	History:
		2002/11/05 - Created by Jeremy Lea <reg@openpave.org>

**************************************************************************/

#define _EVENT_IMP
#define _PROGRESS_IMP
#include "event.h"
#include "reliability.h"
#include <stdlib.h>
#include <time.h>

#ifdef NOBUILD
/* Bessel J_0(x) function in double precision */
double dbesj0(double x)
{
	int k;
	double w, t, y, v, theta;
	static double a[8] = {
		-2.3655394e-12, 4.70889868e-10, 
		-6.78167892231e-8, 6.7816840038636e-6, 
		-4.340277777716935e-4, 0.0156249999999992397, 
		-0.2499999999999999638, 0.9999999999999999997
	};
	static double b[65] = {
		6.26681117e-11, -2.2270614428e-9, 
		6.62981656302e-8, -1.6268486502196e-6, 
		3.21978384111685e-5, -5.00523773331583e-4, 
		0.0059060313537449816, -0.0505265323740109701, 
		0.2936432097610503985, -1.0482565081091638637, 
		1.9181123286040428113, -1.13191994752217001, 
		-0.1965480952704682, 
		4.57457332e-11, -1.5814772025e-9, 
		4.55487446311e-8, -1.0735201286233e-6, 
		2.02015179970014e-5, -2.942392368203808e-4, 
		0.0031801987726150648, -0.0239875209742846362, 
		0.1141447698973777641, -0.2766726722823530233, 
		0.1088620480970941648, 0.5136514645381999197, 
		-0.2100594022073706033, 
		3.31366618e-11, -1.1119090229e-9, 
		3.08823040363e-8, -6.956602653104e-7, 
		1.23499947481762e-5, -1.66295194539618e-4, 
		0.0016048663165678412, -0.0100785479932760966, 
		0.0328996815223415274, -0.0056168761733860688, 
		-0.2341096400274429386, 0.2551729256776404262, 
		0.2288438186148935667, 
		2.38007203e-11, -7.731046439e-10, 
		2.06237001152e-8, -4.412291442285e-7, 
		7.3107766249655e-6, -8.91749801028666e-5, 
		7.34165451384135e-4, -0.0033303085445352071, 
		0.0015425853045205717, 0.0521100583113136379, 
		-0.1334447768979217815, -0.1401330292364750968, 
		0.2685616168804818919, 
		1.6935595e-11, -5.308092192e-10, 
		1.35323005576e-8, -2.726650587978e-7, 
		4.151324014176e-6, -4.43353052220157e-5, 
		2.815740758993879e-4, -4.393235121629007e-4, 
		-0.0067573531105799347, 0.0369141914660130814, 
		0.0081673361942996237, -0.257338128589888186, 
		0.0459580257102978932
	};
	static double c[70] = {
		-3.009451757e-11, -1.4958003844e-10, 
		5.06854544776e-9, 1.863564222012e-8, 
		-6.0304249068078e-7, -1.47686259937403e-6, 
		4.714331342682714e-5, 6.286305481740818e-5, 
		-0.00214137170594124344, -8.9157336676889788e-4, 
		0.04508258728666024989, -0.00490362805828762224, 
		-0.27312196367405374426, 0.04193925184293450356, 
		-7.1245356e-12, -4.1170814825e-10, 
		1.38012624364e-9, 5.704447670683e-8, 
		-1.9026363528842e-7, -5.33925032409729e-6, 
		1.736064885538091e-5, 3.0692619152608375e-4, 
		-9.2598938200644367e-4, -0.00917934265960017663, 
		0.02287952522866389076, 0.10545197546252853195, 
		-0.16126443075752985095, -0.19392874768742235538, 
		2.128344556e-11, -3.1053910272e-10, 
		-3.34979293158e-9, 4.50723289505e-8, 
		3.6437959146427e-7, -4.46421436266678e-6, 
		-2.523429344576552e-5, 2.7519882931758163e-4, 
		9.7185076358599358e-4, -0.00898326746345390692, 
		-0.01665959196063987584, 0.11456933464891967814, 
		0.07885001422733148815, -0.23664819446234712621, 
		3.035295055e-11, 5.486066835e-11, 
		-5.01026824811e-9, -5.0124684786e-9, 
		5.8012340163034e-7, 1.6788922416169e-7, 
		-4.373270270147275e-5, 1.183898532719802e-5, 
		0.00189863342862291449, -0.0011375924956163613, 
		-0.03846797195329871681, 0.02389746880951420335, 
		0.22837862066532347461, -0.06765394811166522844, 
		1.279875977e-11, 3.5925958103e-10, 
		-2.28037105967e-9, -4.852770517176e-8, 
		2.8696428000189e-7, 4.40131125178642e-6, 
		-2.366617753349105e-5, -2.4412456252884129e-4, 
		0.00113028178539430542, 0.0070847051391978908, 
		-0.02526914792327618386, -0.08006137953480093426, 
		0.16548380461475971846, 0.14688405470042110229
	};
	static double d[52] = {
		1.059601355592185731e-14, -2.71150591218550377e-13, 
		8.6514809056201638e-12, -4.6264028554286627e-10, 
		5.0815403835647104e-8, -1.76722552048141208e-5, 
		0.16286750396763997378, 2.949651820598278873e-13, 
		-8.818215611676125741e-12, 3.571119876162253451e-10, 
		-2.63192412099371706e-8, 4.709502795656698909e-6, 
		-0.005208333333333283282, 
		7.18344107717531977e-15, -2.51623725588410308e-13, 
		8.6017784918920604e-12, -4.6256876614290359e-10, 
		5.0815343220437937e-8, -1.7672255176494197e-5, 
		0.16286750396763433767, 2.2327570859680094777e-13, 
		-8.464594853517051292e-12, 3.563766464349055183e-10, 
		-2.631843986737892965e-8, 4.70950234228865941e-6, 
		-0.0052083333332278466225, 
		5.15413392842889366e-15, -2.27740238380640162e-13, 
		8.4827767197609014e-12, -4.6224753682737618e-10, 
		5.0814848128929134e-8, -1.7672254763876748e-5, 
		0.16286750396748926663, 1.7316195320192170887e-13, 
		-7.971122772293919646e-12, 3.544039469911895749e-10, 
		-2.631443902081701081e-8, 4.709498228695400603e-6, 
		-0.005208333331514365361, 
		3.84653681453798517e-15, -2.04464520778789011e-13, 
		8.3089298605177838e-12, -4.6155016158412096e-10, 
		5.081326369646665e-8, -1.76722528311426167e-5, 
		0.1628675039665006593, 1.3797879972460878797e-13, 
		-7.448089381011684812e-12, 3.51273379710695978e-10, 
		-2.630500895563592722e-8, 4.709483934775839193e-6, 
		-0.0052083333227940760113
	};

	w = fabs(x);
	if (w < 1) {
		t = w * w;
		y = ((((((a[0] * t + a[1]) * t + 
			a[2]) * t + a[3]) * t + a[4]) * t + 
			a[5]) * t + a[6]) * t + a[7];
	} else if (w < 8.5) {
		t = w * w * 0.0625;
		k = (int) t;
		t -= k + 0.5;
		k *= 13;
		y = (((((((((((b[k] * t + b[k + 1]) * t + 
			b[k + 2]) * t + b[k + 3]) * t + b[k + 4]) * t + 
			b[k + 5]) * t + b[k + 6]) * t + b[k + 7]) * t + 
			b[k + 8]) * t + b[k + 9]) * t + b[k + 10]) * t + 
			b[k + 11]) * t + b[k + 12];
	} else if (w < 12.5) {
		k = (int) w;
		t = w - (k + 0.5);
		k = 14 * (k - 8);
		y = ((((((((((((c[k] * t + c[k + 1]) * t + 
			c[k + 2]) * t + c[k + 3]) * t + c[k + 4]) * t + 
			c[k + 5]) * t + c[k + 6]) * t + c[k + 7]) * t + 
			c[k + 8]) * t + c[k + 9]) * t + c[k + 10]) * t + 
			c[k + 11]) * t + c[k + 12]) * t + c[k + 13];
	} else {
		v = 24 / w;
		t = v * v;
		k = 13 * ((int) t);
		y = ((((((d[k] * t + d[k + 1]) * t + 
			d[k + 2]) * t + d[k + 3]) * t + d[k + 4]) * t + 
			d[k + 5]) * t + d[k + 6]) * sqrt(v);
		theta = (((((d[k + 7] * t + d[k + 8]) * t + 
			d[k + 9]) * t + d[k + 10]) * t + d[k + 11]) * t + 
			d[k + 12]) * v - 0.78539816339744830962;
		y *= cos(w + theta);
	}
	return y;
}

/* Bessel J_1(x) function in double precision */
double dbesj1(double x)
{
	int k;
	double w, t, y, v, theta;
	static double a[8] = {
		-1.4810349e-13, 3.363594618e-11, 
		-5.65140051697e-9, 6.7816840144764e-7, 
		-5.425347222188379e-5, 0.00260416666666662438, 
		-0.06249999999999999799, 0.49999999999999999998
	};
	static double b[65] = {
		2.43721316e-12, -9.400554763e-11, 
		3.0605338998e-9, -8.287270492518e-8, 
		1.83020515991344e-6, -3.219783841164382e-5, 
		4.3795830161515318e-4, -0.00442952351530868999, 
		0.03157908273375945955, -0.14682160488052520107, 
		0.39309619054093640008, -0.4795280821510107028, 
		0.1414899934402712514, 
		1.82119257e-12, -6.862117678e-11, 
		2.1732790836e-9, -5.69359291782e-8, 
		1.20771046483277e-6, -2.020151799736374e-5, 
		2.5745933218048448e-4, -0.00238514907946126334, 
		0.01499220060892984289, -0.05707238494868888345, 
		0.10375225210588234727, -0.02721551202427354117, 
		-0.06420643306727498985, 
		1.352611196e-12, -4.9706947875e-11, 
		1.527944986332e-9, -3.8602878823401e-8, 
		7.82618036237845e-7, -1.23499947484511e-5, 
		1.45508295194426686e-4, -0.001203649737425854162, 
		0.006299092495799005109, -0.016449840761170764763, 
		0.002106328565019748701, 0.05852741000686073465, 
		-0.031896615709705053191, 
		9.97982124e-13, -3.5702556073e-11, 
		1.062332772617e-9, -2.5779624221725e-8, 
		4.96382962683556e-7, -7.310776625173004e-6, 
		7.8028107569541842e-5, -5.50624088538081113e-4, 
		0.002081442840335570371, -7.71292652260286633e-4, 
		-0.019541271866742634199, 0.033361194224480445382, 
		0.017516628654559387164, 
		7.31050661e-13, -2.5404499912e-11, 
		7.29360079088e-10, -1.6915375004937e-8, 
		3.06748319652546e-7, -4.151324014331739e-6, 
		3.8793392054271497e-5, -2.11180556924525773e-4, 
		2.74577195102593786e-4, 0.003378676555289966782, 
		-0.013842821799754920148, -0.002041834048574905921, 
		0.032167266073736023299
	};
	static double c[70] = {
		-1.185964494e-11, 3.9110295657e-10, 
		1.80385519493e-9, -5.575391345723e-8, 
		-1.8635897017174e-7, 5.42738239401869e-6, 
		1.181490114244279e-5, -3.300031939852107e-4, 
		-3.7717832892725053e-4, 0.01070685852970608288, 
		0.00356629346707622489, -0.13524776185998074716, 
		0.00980725611657523952, 0.27312196367405374425, 
		-3.029591097e-11, 9.259293559e-11, 
		4.96321971223e-9, -1.518137078639e-8, 
		-5.7045127595547e-7, 1.71237271302072e-6, 
		4.271400348035384e-5, -1.2152454198713258e-4, 
		-0.00184155714921474963, 0.00462994691003219055, 
		0.03671737063840232452, -0.06863857568599167175, 
		-0.21090395092505707655, 0.16126443075752985095, 
		-2.19760208e-11, -2.7659100729e-10, 
		3.74295124827e-9, 3.684765777023e-8, 
		-4.5072801091574e-7, -3.27941630669276e-6, 
		3.5713715545163e-5, 1.7664005411843533e-4, 
		-0.00165119297594774104, -0.00485925381792986774, 
		0.03593306985381680131, 0.04997877588191962563, 
		-0.22913866929783936544, -0.07885001422733148814, 
		5.16292316e-12, -3.9445956763e-10, 
		-6.6220021263e-10, 5.511286218639e-8, 
		5.01257940078e-8, -5.22111059203425e-6, 
		-1.34311394455105e-6, 3.0612891890766805e-4, 
		-7.103391195326182e-5, -0.00949316714311443491, 
		0.00455036998246516948, 0.11540391585989614784, 
		-0.04779493761902840455, -0.2283786206653234746, 
		2.697817493e-11, -1.6633326949e-10, 
		-4.3313486035e-9, 2.508404686362e-8, 
		4.8528284780984e-7, -2.58267851112118e-6, 
		-3.521049080466759e-5, 1.6566324273339952e-4, 
		0.00146474737522491617, -0.00565140892697147306, 
		-0.028338820556793004, 0.07580744376982855057, 
		0.16012275906960187978, -0.16548380461475971845
	};
	static double d[52] = {
		-1.272346002224188092e-14, 3.370464692346669075e-13, 
		-1.144940314335484869e-11, 6.863141561083429745e-10, 
		-9.491933932960924159e-8, 5.301676561445687562e-5, 
		0.162867503967639974, -3.652982212914147794e-13, 
		1.151126750560028914e-11, -5.165585095674343486e-10, 
		4.657991250060549892e-8, -1.186794704692706504e-5, 
		0.01562499999999994026, 
		-8.713069680903981555e-15, 3.140780373478474935e-13, 
		-1.139089186076256597e-11, 6.862299023338785566e-10, 
		-9.491926788274594674e-8, 5.301676558106268323e-5, 
		0.162867503967646622, -2.792555727162752006e-13, 
		1.108650207651756807e-11, -5.156745588549830981e-10, 
		4.657894859077370979e-8, -1.186794650130550256e-5, 
		0.01562499999987299901, 
		-6.304859171204770696e-15, 2.857249044208791652e-13, 
		-1.124956921556753188e-11, 6.858482894906716661e-10, 
		-9.49186795351689846e-8, 5.301676509057781574e-5, 
		0.1628675039678191167, -2.185193490132496053e-13, 
		1.048820673697426074e-11, -5.132819367467680132e-10, 
		4.65740943737299422e-8, -1.186794150862988921e-5, 
		0.01562499999779270706, 
		-4.74041720979200985e-15, 2.578715253644144182e-13, 
		-1.104148898414138857e-11, 6.850134201626289183e-10, 
		-9.49167823417491964e-8, 5.301676277588728159e-5, 
		0.1628675039690033136, -1.75512205749384229e-13, 
		9.848723331445182397e-12, -5.094535425482245697e-10, 
		4.656255982268609304e-8, -1.186792402114394891e-5, 
		0.01562499998712198636
	};

	w = fabs(x);
	if (w < 1) {
		t = w * w;
		y = (((((((a[0] * t + a[1]) * t + 
			a[2]) * t + a[3]) * t + a[4]) * t + 
			a[5]) * t + a[6]) * t + a[7]) * w;
	} else if (w < 8.5) {
		t = w * w * 0.0625;
		k = (int) t;
		t -= k + 0.5;
		k *= 13;
		y = ((((((((((((b[k] * t + b[k + 1]) * t + 
			b[k + 2]) * t + b[k + 3]) * t + b[k + 4]) * t + 
			b[k + 5]) * t + b[k + 6]) * t + b[k + 7]) * t + 
			b[k + 8]) * t + b[k + 9]) * t + b[k + 10]) * t + 
			b[k + 11]) * t + b[k + 12]) * w;
	} else if (w < 12.5) {
		k = (int) w;
		t = w - (k + 0.5);
		k = 14 * (k - 8);
		y = ((((((((((((c[k] * t + c[k + 1]) * t + 
			c[k + 2]) * t + c[k + 3]) * t + c[k + 4]) * t + 
			c[k + 5]) * t + c[k + 6]) * t + c[k + 7]) * t + 
			c[k + 8]) * t + c[k + 9]) * t + c[k + 10]) * t + 
			c[k + 11]) * t + c[k + 12]) * t + c[k + 13];
	} else {
		v = 24 / w;
		t = v * v;
		k = 13 * ((int) t);
		y = ((((((d[k] * t + d[k + 1]) * t + 
			d[k + 2]) * t + d[k + 3]) * t + d[k + 4]) * t + 
			d[k + 5]) * t + d[k + 6]) * sqrt(v);
		theta = (((((d[k + 7] * t + d[k + 8]) * t + 
			d[k + 9]) * t + d[k + 10]) * t + d[k + 11]) * t + 
			d[k + 12]) * v - 0.78539816339744830962;
		y *= sin(w + theta);
	}
	return x < 0 ? -y : y;
}

int
main()
{
	double  d;

	//FILE * fp = fopen("Release/bestest.dat","w");
	for (d = 0.0; d < 1<<12; d += 0.001) {
		double m0 = j0(d);
		double m1 = j1(d);
		double d0 = dbesj0(d);
		double d1 = dbesj1(d);
		if (fabs(m0-d0) > 1e-15 || fabs(m1-d1) > 1e-15)
			printf("%9.4f\t%0.16e\t%0.16e\t%0.16e\t%0.16e\n",d,m0,m1,d0,d1);
	}
	//fclose(fp);
}
#endif

#ifdef NOBUILD
int
main()
{
	fixed<6> a;
	fixed<6> b(0);
	fixed<6> c(12);
	fixed<6> d(12.34);
	fixed<6> e(b);
	fixed<6> f(-12);

	a = -c;
	b = b + c;
	e += d;
	e -= 1;
	e = (fixed<6>)(0.06) + e;
	++e;
	printf(a == f ? "true\n" : "false\n");
	printf(d > c ? "true\n" : "false\n");
	printf((double)(d) > 11.0 ? "true\n" : "false\n");
	printf("%g\n",(double)(b));
	printf("%g\n",(double)(e));
}
#endif

#ifdef NOBUILD
int
main()
{
	int i;

	for (i = 0; i < 10000000; i++) {
		double u = stdnormal_rnd();
		printf("%0.16e\n",u);
	}
}
#endif

#ifdef NOBUILD
int
main()
{
	double p;

	for (p = 2.5; p <= 6.0; p += 0.001) {
		double u = -pow(2,p);
		double p0 = stdnormal_pdf(u);
		double p1 = stdnormal_cdf(u);
		double p2 = quad8_stdnormal_pdf(-100.0,u,0.0);
		double u0 = stdnormal_inv(p1);
		printf("%0.16e\t%0.16e\t%0.16e\t%0.16e\t%0.16e\t%0.16e\n",u,p0,p1,p2,u0,fabs(p1-p2));
	}
}
#endif

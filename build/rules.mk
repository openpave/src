#! gmake
# 
# ***** BEGIN LICENSE BLOCK *****
# Version: MPL 1.1/GPL 2.0/LGPL 2.1
#
# The contents of this file are subject to the Mozilla Public License Version
# 1.1 (the "License"); you may not use this file except in compliance with
# the License. You may obtain a copy of the License at
# http://www.mozilla.org/MPL/
#
# Software distributed under the License is distributed on an "AS IS" basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
# for the specific language governing rights and limitations under the
# License.
#
# The Original Code is the Netscape Portable Runtime (NSPR).
#
# The Initial Developer of the Original Code is
# Netscape Communications Corporation.
# Portions created by the Initial Developer are Copyright (C) 1998-2000
# the Initial Developer. All Rights Reserved.
#
# Contributor(s):
#
# Alternatively, the contents of this file may be used under the terms of
# either the GNU General Public License Version 2 or later (the "GPL"), or
# the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
# in which case the provisions of the GPL or the LGPL are applicable instead
# of those above. If you wish to allow use of your version of this file only
# under the terms of either the GPL or the LGPL, and not to allow others to
# use your version of this file under the terms of the MPL, indicate your
# decision by deleting the provisions above and replace them with the notice
# and other provisions required by the GPL or the LGPL. If you do not delete
# the provisions above, a recipient may use your version of this file under
# the terms of any one of the MPL, the GPL or the LGPL.
#
# ***** END LICENSE BLOCK *****

################################################################################
#
# $OpenPave$
#
# all - Create libraries.
#       Create programs. 
#
# install - Install headers, libraries, and programs on the system.
#
# Parameters to this makefile (set these before including):
#
# a)
#	TARGETS	-- the target to create 
#			(defaults to $LIBRARY $PROGRAM)
# b)
#	DIRS	-- subdirectories for make to recurse on
#			(the 'all' rule builds $TARGETS $DIRS)
# c)
#	CSRCS   -- .c files to compile
#			(used to define $OBJS)
# d)
#	PROGRAM	-- the target program name to create from $OBJS
# e)
#	LIBRARY	-- the target library name to create from $OBJS
#
################################################################################

CFLAGS		:= $(VISIBILITY_FLAGS) $(OS_CFLAGS) $(DEFINES) $(INCLUDES)
CXXFLAGS	:= $(VISIBILITY_FLAGS) $(OS_CFLAGS) $(DEFINES) $(INCLUDES)
LDFLAGS		:= $(OS_LDFLAGS) $(LIBS) $(OS_LIBS)

ifeq (,$(filter-out WINNT,$(OS_ARCH)))
LDFLAGS 	:= $(LDFLAGS:-l%=lib%.$(LIB_SUFFIX))
LDFLAGS		:= $(LDFLAGS:-L=/LIBPATH:)
MKSHLIB		:= $(LD) $(OS_DLLFLAGS) $(DLLFLAGS)
endif

ifeq ($(OS_ARCH),Darwin)
PWD := $(shell pwd)
endif

ifeq (,$(CROSS_COMPILE)$(filter-out WINNT,$(OS_ARCH)))
INSTALL		= $(NSINSTALL)
else
ifeq ($(NSDISTMODE),copy)
# copy files, but preserve source mtime
INSTALL		= $(NSINSTALL) -t
else
ifeq ($(NSDISTMODE),absolute_symlink)
# install using absolute symbolic links
ifeq ($(OS_ARCH),Darwin)
INSTALL		= $(NSINSTALL) -L $(PWD)
else
INSTALL		= $(NSINSTALL) -L `$(MOD_DEPTH)/config/nfspwd`
endif
else
# install using relative symbolic links
INSTALL		= $(NSINSTALL) -R
endif
endif
endif # (WINNT || OS2) && !CROSS_COMPILE

GARBAGE		+= .depend core $(wildcard core.[0-9]*)
DIST_GARBAGE	+= Makefile

#
# This makefile contains rules for building the following kinds of
# libraries:
# - LIBRARY: a static (archival) library
# - SHARED_LIBRARY: a shared (dynamic link) library
# - IMPORT_LIBRARY: an import library, used only on Windows and OS/2
#
# The names of these libraries can be generated by simply specifying
# LIBRARY_NAME and LIBRARY_VERSION.
#

ifdef LIBRARY_NAME
LIBRARY		= lib$(LIBRARY_NAME)$(LIBRARY_VERSION).$(LIB_SUFFIX)
ifndef ONLY_STATIC_LIB
ifeq (,$(filter-out WINNT,$(OS_ARCH)))
LIBRARY		= lib$(LIBRARY_NAME)$(LIBRARY_VERSION)_s.$(LIB_SUFFIX)
SHARED_LIBRARY	= lib$(LIBRARY_NAME)$(LIBRARY_VERSION).$(DLL_SUFFIX)
IMPORT_LIBRARY	= lib$(LIBRARY_NAME)$(LIBRARY_VERSION).$(LIB_SUFFIX)
else
SHARED_LIBRARY	= lib$(LIBRARY_NAME)$(LIBRARY_VERSION).$(DLL_SUFFIX)
endif
endif
endif


ifdef PROGRAM_NAME
PROGRAM		= $(PROGRAM_NAME)$(EXE_SUFFIX)
endif

ifndef TARGETS
ifdef LIBRARY
TARGETS		+= $(LIBRARY) $(SHARED_LIBRARY) $(IMPORT_LIBRARY)
endif
ifdef PROGRAM
TARGETS		+= $(PROGRAM)
endif
endif

#
# OBJS is the list of object files.  It can be constructed by
# specifying CSRCS (list of C source files) and ASFILES (list
# of assembly language source files).
#

ifndef OBJS
OBJS		= $(CSRCS:.c=.$(OBJ_SUFFIX)) \
		  $(CPPSRCS:.cpp=.$(OBJ_SUFFIX)) \
		  $(ASFILES:.$(ASM_SUFFIX)=.$(OBJ_SUFFIX))
endif

ALL_TRASH	= $(TARGETS) $(OBJS) $(RES) $(GARBAGE)

ifndef RELEASE_LIBS_DEST
RELEASE_LIBS_DEST	= $(RELEASE_LIB_DIR)
endif

ifdef DIRS
LOOP_OVER_DIRS		=					\
	@for d in $(DIRS); do					\
		if test -d $$d; then				\
			set -e;					\
			echo "cd $$d; $(MAKE) $@";		\
			$(MAKE) -C $$d $@;			\
			set +e;					\
		else						\
			echo "Skipping non-directory $$d...";	\
		fi;						\
	done
endif

################################################################################

all:: $(MOD_DEPTH)/config.status Makefile
	+$(LOOP_OVER_DIRS)

clean:: Makefile
	rm -rf $(OBJS) $(RES) $(GARBAGE)
	+$(LOOP_OVER_DIRS)

realclean:: Makefile
	rm -rf $(ALL_TRASH)
	+$(LOOP_OVER_DIRS)

distclean:: Makefile
	rm -rf $(ALL_TRASH) $(DIST_GARBAGE)
	+$(LOOP_OVER_DIRS)

all:: $(TARGETS)

install:: $(RELEASE_BINS) $(RELEASE_HEADERS) $(RELEASE_LIBS)
ifdef RELEASE_BINS
	$(INSTALL) -t -m 0755 $(RELEASE_BINS) $(DESTDIR)$(bindir)
endif
ifdef RELEASE_HEADERS
	$(INSTALL) -t -m 0644 $(RELEASE_HEADERS) $(DESTDIR)$(includedir)/$(include_subdir)
endif
ifdef RELEASE_LIBS
	$(INSTALL) -t -m 0755 $(RELEASE_LIBS) $(DESTDIR)$(libdir)/$(lib_subdir)
endif
	+$(LOOP_OVER_DIRS)

release:: all
ifdef RELEASE_BINS
	@echo "Copying executable programs and scripts to release directory"
	@if test -z "$(BUILD_NUMBER)"; then \
		echo "BUILD_NUMBER must be defined"; \
		false; \
	else \
		true; \
	fi
	@if test ! -d $(RELEASE_BIN_DIR); then \
		rm -rf $(RELEASE_BIN_DIR); \
		$(INSTALL) -D $(RELEASE_BIN_DIR);\
	else \
		true; \
	fi
	cp $(RELEASE_BINS) $(RELEASE_BIN_DIR)
endif
ifdef RELEASE_LIBS
	@echo "Copying libraries to release directory"
	@if test -z "$(BUILD_NUMBER)"; then \
		echo "BUILD_NUMBER must be defined"; \
		false; \
	else \
		true; \
	fi
	@if test ! -d $(RELEASE_LIBS_DEST); then \
		rm -rf $(RELEASE_LIBS_DEST); \
		$(INSTALL) -D $(RELEASE_LIBS_DEST);\
	else \
		true; \
	fi
	cp $(RELEASE_LIBS) $(RELEASE_LIBS_DEST)
endif
ifdef RELEASE_HEADERS
	@echo "Copying header files to release directory"
	@if test -z "$(BUILD_NUMBER)"; then \
		echo "BUILD_NUMBER must be defined"; \
		false; \
	else \
		true; \
	fi
	@if test ! -d $(RELEASE_HEADERS_DEST); then \
		rm -rf $(RELEASE_HEADERS_DEST); \
		$(INSTALL) -D $(RELEASE_HEADERS_DEST);\
	else \
		true; \
	fi
	cp $(RELEASE_HEADERS) $(RELEASE_HEADERS_DEST)
endif
	+$(LOOP_OVER_DIRS)

Makefile: $(srcdir)/Makefile.in $(MOD_DEPTH)/config.status
	$(MAKE) -C $(topsrcdir) -f openpave.mk configure

$(PROGRAM): $(OBJS)
ifeq ($(USING_GCC)_$(OS_ARCH),_WINNT)
	$(CC) $(OBJS) -Fe$@ -link $(LDFLAGS)
else
ifdef CPPSRCS
	$(CXX) -o $@ $(CFLAGS) $(OBJS) $(LDFLAGS)
else
	$(CC) -o $@ $(CFLAGS) $(OBJS) $(LDFLAGS)
endif
endif
ifdef ENABLE_STRIP
	$(STRIP) $@
endif

$(LIBRARY): $(OBJS)
	rm -f $@
	$(AR) $(AR_FLAGS) $(OBJS) $(AR_EXTRA_ARGS)
	$(RANLIB) $@

$(SHARED_LIBRARY): $(OBJS) $(RES) $(MAPFILE)
	rm -f $@
ifeq ($(USING_GCC)_$(OS_ARCH),_WINNT)
	$(MKSHLIB) -MAP $(DLLBASE) $(DLL_LIBS) $(OBJS) $(RES)
else
	$(MKSHLIB) $(OBJS) $(RES)
endif
ifdef ENABLE_STRIP
	$(STRIP) $@
endif

ifeq ($(OS_ARCH),WINNT)
$(RES): $(RESNAME)
# The resource compiler does not understand the -U option.
ifdef USING_GCC
	$(RC) $(RCFLAGS) $(filter-out -U%,$(DEFINES)) $(INCLUDES:-I%=--include-dir %) -o $@ $<
else
	$(RC) $(RCFLAGS) $(filter-out -U%,$(DEFINES)) $(INCLUDES) -Fo$@ $<
endif # GCC
	@echo $(RES) finished
endif

#
# Translate source filenames to absolute paths. This is required for
# debuggers under Windows to find source files automatically.
#

ifeq ($(USING_GCC)_$(OS_ARCH),_WINNT)
PWD := $(shell pwd)
abspath = $(if $(findstring :,$(1)),$(1),$(if $(filter /%,$(1)),$(1),$(PWD)/$(1)))
endif

%.$(OBJ_SUFFIX): %.cpp
ifeq ($(USING_GCC)_$(OS_ARCH),_WINNT)
	$(CXX) -Fo$@ -c $(CXXFLAGS) $(call abspath,$<)
else
	$(CXX) -o $@ -c $(CXXFLAGS) $<
endif

%.$(OBJ_SUFFIX): %.c
ifeq ($(USING_GCC)_$(OS_ARCH),_WINNT)
	$(CC) -Fo$@ -c $(CFLAGS) $(call abspath,$<)
else
	$(CC) -o $@ -c $(CFLAGS) $<
endif

%.$(OBJ_SUFFIX): %.$(ASM_SUFFIX)
	$(AS) -o $@ $(ASFLAGS) -c $<

%.i: %.c
	$(CC) -C -E $(CFLAGS) $< > $*.i

################################################################################
# Special gmake rules.
################################################################################

#
# Re-define the list of default suffixes, so gmake won't have to churn through
# hundreds of built-in suffix rules for stuff we don't need.
#
.SUFFIXES:
.SUFFIXES: .$(LIB_SUFFIX) .$(DLL_SUFFIX) .$(OBJ_SUFFIX) .c .cpp .$(ASM_SUFFIX) .h .i

#
# Fake targets.  Always run these rules, even if a file/directory with that
# name already exists.
#
.PHONY: all clean install libs realclean release

################################################################################
#
# $OpenPave$
#
# all - Create libraries.
#       Create programs. 
#
# install - Install headers, libraries, and programs on the system.
#
# Parameters to this makefile (set these before including):
#
# a)
#	TARGETS	-- the target to create 
#			(defaults to $LIBRARY $PROGRAM)
# b)
#	DIRS	-- subdirectories for make to recurse on
#			(the 'all' rule builds $TARGETS $DIRS)
# c)
#	CSRCS   -- .c files to compile
#			(used to define $OBJS)
# d)
#	PROGRAM	-- the target program name to create from $OBJS
# e)
#	LIBRARY	-- the target library name to create from $OBJS
#
################################################################################

PWD := $(shell pwd)

ifeq ($(NSDISTMODE),copy)
# copy files, but preserve source mtime
INSTALL		= $(INSTALL) -t
else
# install using relative symbolic links
INSTALL		= $(INSTALL) -R
endif

GARBAGE		+= .depend core $(wildcard core.[0-9]*)
DIST_GARBAGE	+= Makefile

#
# This makefile contains rules for building the following kinds of
# libraries:
# - LIBRARY: a static (archival) library
# - SHARED_LIBRARY: a shared (dynamic link) library
# - IMPORT_LIBRARY: an import library, used only on Windows and OS/2
#
# The names of these libraries can be generated by simply specifying
# LIBRARY_NAME.
#

ifdef LIBRARY_NAME
LIBRARY		= lib$(LIBRARY_NAME).$(LIB_SUFFIX)
ifndef ONLY_STATIC_LIB
ifeq (,$(filter-out WINNT,$(OS_ARCH)))
LIBRARY		= lib$(LIBRARY_NAME)_s.$(LIB_SUFFIX)
SHARED_LIBRARY	= lib$(LIBRARY_NAME).$(DLL_SUFFIX)
IMPORT_LIBRARY	= lib$(LIBRARY_NAME).$(LIB_SUFFIX)
else
SHARED_LIBRARY	= lib$(LIBRARY_NAME).$(DLL_SUFFIX)
endif
endif
endif

ifdef PROGRAM_NAME
PROGRAM		= $(PROGRAM_NAME)$(EXE_SUFFIX)
endif

ifndef TARGETS
ifdef LIBRARY
TARGETS		+= $(LIBRARY) $(SHARED_LIBRARY) $(IMPORT_LIBRARY)
endif
ifdef PROGRAM
TARGETS		+= $(PROGRAM)
endif
endif

#
# OBJS is the list of object files.  It can be constructed by
# specifying CSRCS (list of C source files) and ASFILES (list
# of assembly language source files).
#

ifndef OBJS
OBJS	= $(strip \
	$(CSRCS:.c=.$(OBJ_SUFFIX)) \
	$(CPPSRCS:.cpp=.$(OBJ_SUFFIX)) \
	$(ASFILES:.$(ASM_SUFFIX)=.$(OBJ_SUFFIX)))
endif

ALL_TRASH	= $(TARGETS) $(OBJS) $(RES) $(GARBAGE)

ifdef DIRS
LOOP_OVER_DIRS = \
	@for d in $(DIRS); do \
		$(MAKE) -C $$d $@; \
	done
endif

CONFIG_DEPS = \
	$(topsrcdir)/build/rules.mk		\
	$(MOD_DEPTH)/config.status		\
	$(MOD_DEPTH)/build/autoconf.mk		\
	Makefile

.DEFAULT: all

.PHONY: all
all:: $(CONFIG_DEPS)
	+$(LOOP_OVER_DIRS)

all:: $(TARGETS)

ifneq (,$(TARGETS))
$(TARGETS): $(CONFIG_DEPS)
endif

ifneq (,$(OBJS))
$(OBJS): $(CONFIG_DEPS)
endif

.PHONY: clean
clean:: $(CONFIG_DEPS)
	rm -rf $(OBJS) $(RES) $(GARBAGE)
	+$(LOOP_OVER_DIRS)

.PHONY: realclean
realclean:: $(CONFIG_DEPS)
	rm -rf $(ALL_TRASH)
	+$(LOOP_OVER_DIRS)

.PHONY: distclean
distclean:: $(CONFIG_DEPS)
	rm -rf $(ALL_TRASH) $(DIST_GARBAGE)
	+$(LOOP_OVER_DIRS)

.PHONY: install
install:: $(RELEASE_BINS) $(RELEASE_HEADERS) $(RELEASE_LIBS)
ifdef RELEASE_BINS
	$(INSTALL) -t -m 0755 $(RELEASE_BINS) $(DESTDIR)$(bindir)
endif
ifdef RELEASE_HEADERS
	$(INSTALL) -t -m 0644 $(RELEASE_HEADERS) $(DESTDIR)$(includedir)/$(include_subdir)
endif
ifdef RELEASE_LIBS
	$(INSTALL) -t -m 0755 $(RELEASE_LIBS) $(DESTDIR)$(libdir)/$(lib_subdir)
endif
	+$(LOOP_OVER_DIRS)

.PHONY: release
release:: all
ifdef RELEASE_BINS
	@echo "Copying executable programs and scripts to release directory"
	@if test ! -d $(RELEASE_BIN_DIR); then \
		rm -rf $(RELEASE_BIN_DIR); \
		$(INSTALL) -D $(RELEASE_BIN_DIR);\
	else \
		true; \
	fi
	cp $(RELEASE_BINS) $(RELEASE_BIN_DIR)
endif
ifdef RELEASE_LIBS
	@echo "Copying libraries to release directory"
	@if test ! -d $(RELEASE_LIB_DIR); then \
		rm -rf $(RELEASE_LIB_DIR); \
		$(INSTALL) -D $(RELEASE_LIB_DIR);\
	else \
		true; \
	fi
	cp $(RELEASE_LIBS) $(RELEASE_LIB_DIR)
endif
ifdef RELEASE_HEADERS
	@echo "Copying header files to release directory"
	@if test ! -d $(RELEASE_HEADERS_DEST); then \
		rm -rf $(RELEASE_HEADERS_DEST); \
		$(INSTALL) -D $(RELEASE_HEADERS_DEST);\
	else \
		true; \
	fi
	cp $(RELEASE_HEADERS) $(RELEASE_HEADERS_DEST)
endif
	+$(LOOP_OVER_DIRS)

Makefile: $(srcdir)/Makefile.in
	$(MAKE) -C $(topsrcdir) -f openpave.mk configure

$(PROGRAM): $(OBJS)
ifdef MSC_VER
	@sh $(topsrcdir)/build/cygwin-wrapper \
		$(CC) $(OBJS) -Fe$@ -link $(OS_LDFLAGS) \
		$(patsubst -l%,lib%.$(LIB_SUFFIX),$(subst -L,/LIBPATH:,$(LIBS))) \
		$(OS_LIBS)
else
ifdef CPPSRCS
	$(CXX) $(OS_LDFLAGS) $(OBJS) $(LIBS) $(OS_LIBS) -o $@
else
	$(CC) $(OS_LDFLAGS) $(OBJS) $(LIBS) $(OS_LIBS) -o $@
endif
ifdef BUILD_OPT
	$(STRIP) $@
endif
endif

$(LIBRARY): $(OBJS)
	rm -f $@
ifdef MSC_VER
	@sh $(topsrcdir)/build/cygwin-wrapper \
		$(AR) $(ARFLAGS) -OUT:"$@" $(OBJS) $(AR_EXTRA_ARGS)
else
	$(AR) $(ARFLAGS) $(OBJS) $(AR_EXTRA_ARGS)
ifdef RANLIB
	$(RANLIB) $@
endif
endif

$(SHARED_LIBRARY): $(OBJS) $(RES)
	rm -f $@
ifdef MSC_VER
	@sh $(topsrcdir)/build/cygwin-wrapper \
		$(LD) $(DSO_LDFLAGS) -OUT:"$@" $(OBJS) $(RES)
else
	$(CC) $(DSO_LDFLAGS) $(OBJS) $(RES) -o $@
ifdef BUILD_OPT
	$(STRIP) $@
endif
endif

ifeq ($(OS_ARCH),WINNT)
$(RES): $(RESNAME)
# The resource compiler does not understand the -U option.
ifdef MSC_VER
	@sh $(topsrcdir)/build/cygwin-wrapper \
		$(RC) $(RCFLAGS) $(filter-out -U%,$(DEFINES)) $(INCLUDES) -Fo$@ $<
else
	$(RC) $(RCFLAGS) $(filter-out -U%,$(DEFINES)) $(INCLUDES:-I%=--include-dir %) -o $@ $<
endif
endif

#
# Translate source filenames to absolute paths. This is required for
# debuggers under Windows to find source files automatically.
#

ifdef MSC_VER
abspath = $(if $(findstring :,$(1)),$(1),$(if $(filter /%,$(1)),$(1),$(PWD)/$(1)))
endif

%.$(OBJ_SUFFIX): %.cpp
ifdef MSC_VER
	@sh $(topsrcdir)/build/cygwin-wrapper \
		$(CXX) -Fo$@ -c $(OS_CXXFLAGS) $(DEFINES) $(INCLUDES) $(call abspath,$<)
else
	$(CXX) -c $(OS_CXXFLAGS) $(DEFINES) $(INCLUDES) $< -o $@ 
endif

%.$(OBJ_SUFFIX): %.c
ifdef MSC_VER
	@sh $(topsrcdir)/build/cygwin-wrapper \
		$(CC) -Fo$@ -c $(OS_CFLAGS) $(DEFINES) $(INCLUDES) $(call abspath,$<)
else
	$(CC) -c $(OS_CFLAGS) $(DEFINES) $(INCLUDES) $< -o $@ 
endif

%.$(OBJ_SUFFIX): %.$(ASM_SUFFIX)
	$(AS) -c $(ASFLAGS) $<-o $@ 

%.i: %.c
	$(CPP) -C $(OS_CPPFLAGS) $(DEFINES) $(INCLUDES) $< > $@

.SUFFIXES:
.SUFFIXES: .$(LIB_SUFFIX) .$(DLL_SUFFIX) .$(OBJ_SUFFIX) .c .cpp .$(ASM_SUFFIX) .h .i

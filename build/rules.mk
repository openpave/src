#
# $OpenPave$
#

# Translate source filenames to absolute paths. This is required for
# debuggers under Windows to find source files automatically.
ifdef WIN32
abspath = $(if $(findstring :,$(1)),$(1),$(if $(filter /%,$(1)),$(1),$(PWD)/$(1)))
endif

.DEFAULT_GOAL   := all

# We always define the sub directories, just because it means the all
# target is not empty and gmake doesn't moan...
DIRS ?=
LOOP_OVER_DIRS = \
    @set -e; \
    for d in $(DIRS); do \
        $(MAKE) -C $$d $@; \
    done;

# These are all the files needed for the makefile
CONFIG_DEPS =                          \
    $(topsrcdir)/build/rules.mk        \
    $(MOD_DEPTH)/build/autoconf.mk     \
    Makefile

# Rebuild the makefile if it is out of date
# gmake will magically restart if this is called
Makefile: $(srcdir)/Makefile.in $(MOD_DEPTH)/config.status
	$(MAKE) -C $(topsrcdir) -f openpave.mk configure

# This makefile contains rules for building the following kinds of
# libraries:
# - STATIC_LIB: a static (archival) library
# - SHARED_LIB: a shared (dynamic link) library
# - IMPORT_LIB: an import library, used only on Windows and OS/2
#
# The names of these libraries can be generated by simply specifying
# LIBRARY.
ifdef LIBRARY
STATIC_LIB       = lib$(LIBRARY).$(LIB_SUFFIX)
ifndef ONLY_STATIC_LIB
OS_CPPFLAGS     += -DBUILD_DLL
ifdef WIN32
STATIC_LIB       = lib$(LIBRARY)_s.$(LIB_SUFFIX)
SHARED_LIB       = lib$(LIBRARY).$(DLL_SUFFIX)
IMPORT_LIB       = lib$(LIBRARY).$(LIB_SUFFIX)
else
SHARED_LIB       = lib$(LIBRARY).$(DLL_SUFFIX)
endif
endif
endif

# These are the files for the library depends for this library
# LIB_PATH is provided for us by the caller.
echo-lib-deps:
ifdef LIBRARY
ifdef ONLY_STATIC_LIB
	@echo $(LIB_PATH)/$(STATIC_LIB)
else
ifdef WIN32
	@echo $(LIB_PATH)/$(IMPORT_LIB)
else
	@echo $(LIB_PATH)/$(SHARED_LIB)
endif
endif
endif

# These are the linking commands for this library
# LIB_PATH is provided for us by the caller.
echo-libs:
ifdef LIBRARY
	@echo -n "-L$(LIB_PATH) -l$(LIBRARY) ";
endif

# These are the linking commands for this library
# LIB_PATH is provided for us by the caller.
echo-includes:
	@echo -n "-I$(LIB_PATH) ";

# LIBS are the required libraries for this module
# If not specified they are derived from the module requires
ifndef LIBS
LIBS             = $(OP_MODULE_REQUIRES_$(OP_MODULE))
endif

# These call the other modules to get their library names, etc.
ifdef LIBS
_INCLUDES = $(strip $(shell \
  for l in $(LIBS); do \
    $(MAKE) -s --no-print-directory -C $(MOD_DEPTH)/$$l \
      LIB_PATH=$(topsrcdir)/$$l echo-includes; \
  done;))
_LIBS = $(strip $(shell \
  for l in $(LIBS); do \
    $(MAKE) -s --no-print-directory -C $(MOD_DEPTH)/$$l \
      LIB_PATH=$(MOD_DEPTH)/$$l echo-libs; \
  done;))
_LIB_DEPS = $(strip $(shell \
  for l in $(LIBS); do \
    $(MAKE) -s --no-print-directory -C $(MOD_DEPTH)/$$l \
      LIB_PATH=$(MOD_DEPTH)/$$l echo-lib-deps; \
  done;))
endif

# Add the include path in the obj dir to get config.h
ifndef INCLUDES
INCLUDES         = -I$(MOD_DEPTH)/include $(_INCLUDES)
endif

ifdef PROGRAMS
PROGS            = $(foreach p,$(PROGRAMS),$(p)$(EXE_SUFFIX))
define OBJ_template =
CSRCS           += $(CSRCS_$(1))
CXXSRCS         += $(CXXSRCS_$(1))
ASFILES         += $(ASFILES_$(1))
OBJS_$(1)        = $(strip \
                   $(CSRCS_$(1):.c=.$(OBJ_SUFFIX)) \
                   $(CXXSRCS_$(1):.cpp=.$(OBJ_SUFFIX)) \
                   $(ASFILES_$(1):.$(ASM_SUFFIX)=.$(OBJ_SUFFIX)))
endef
$(foreach p,$(PROGRAMS),$(eval $(call OBJ_template,$(p))))
endif

ifndef OBJS
OBJS             = $(strip \
                   $(CSRCS:.c=.$(OBJ_SUFFIX)) \
                   $(CXXSRCS:.cpp=.$(OBJ_SUFFIX)) \
                   $(ASFILES:.$(ASM_SUFFIX)=.$(OBJ_SUFFIX)))
endif
ifneq (,$(OBJS))
$(OBJS): $(CONFIG_DEPS)
endif

ifndef TARGETS
ifdef LIBRARY
TARGETS         += $(STATIC_LIB) $(SHARED_LIB) $(IMPORT_LIB)
endif
ifdef PROGS
TARGETS         += $(PROGS)
endif
endif

.PHONY: all
all:: $(CONFIG_DEPS)
	+$(LOOP_OVER_DIRS)

ifneq (,$(TARGETS))
$(TARGETS): $(CONFIG_DEPS)

all:: $(TARGETS)
endif

.PHONY: install
install:: $(RELEASE_BINS) $(RELEASE_HEADERS) $(RELEASE_LIBS)
ifdef RELEASE_BINS
	$(INSTALL) -t -m 0755 $(RELEASE_BINS) $(DESTDIR)$(bindir)
endif
ifdef RELEASE_HEADERS
	$(INSTALL) -t -m 0644 $(RELEASE_HEADERS) $(DESTDIR)$(includedir)/$(include_subdir)
endif
ifdef RELEASE_LIBS
	$(INSTALL) -t -m 0755 $(RELEASE_LIBS) $(DESTDIR)$(libdir)/$(lib_subdir)
endif
	+$(LOOP_OVER_DIRS)

.PHONY: release
release:: all
ifdef RELEASE_BINS
	@echo "Copying executable programs and scripts to release directory"
	@if test ! -d $(RELEASE_BIN_DIR); then \
	    rm -rf $(RELEASE_BIN_DIR); \
	    $(INSTALL) -D $(RELEASE_BIN_DIR);\
	else \
	    true; \
	fi
	cp $(RELEASE_BINS) $(RELEASE_BIN_DIR)
endif
ifdef RELEASE_LIBS
	@echo "Copying libraries to release directory"
	@if test ! -d $(RELEASE_LIB_DIR); then \
	    rm -rf $(RELEASE_LIB_DIR); \
	    $(INSTALL) -D $(RELEASE_LIB_DIR);\
	else \
	    true; \
	fi
	cp $(RELEASE_LIBS) $(RELEASE_LIB_DIR)
endif
ifdef RELEASE_HEADERS
	@echo "Copying header files to release directory"
	@if test ! -d $(RELEASE_HEADERS_DEST); then \
	    rm -rf $(RELEASE_HEADERS_DEST); \
	    $(INSTALL) -D $(RELEASE_HEADERS_DEST);\
	else \
	    true; \
	fi
	cp $(RELEASE_HEADERS) $(RELEASE_HEADERS_DEST)
endif
	+$(LOOP_OVER_DIRS)

define PROGRAM_template =
ifndef OBJS_$(1)
ifdef CXXSRCS
CXXSRCS_$(1)     = $(CXXSRCS)
endif
OBJS_$(1)        = $(OBJS)
endif
$(1)$(EXE_SUFFIX): $$(OBJS_$(1)) $(_LIB_DEPS)
ifdef WIN32
	@sh $$(topsrcdir)/build/cygwin-wrapper \
	    $$(CC) $$(OBJS_$(1)) -Fe$$@ -link -MANIFEST $$(OS_LDFLAGS) \
	    $$(patsubst -l%,lib%.$$(LIB_SUFFIX),$$(subst -L,/LIBPATH:,$$(_LIBS))) \
	    $$(OS_LIBS)
	@sh $$(topsrcdir)/build/cygwin-wrapper \
	    $$(RANLIB) -MANIFEST $$@.manifest -OUTPUTRESOURCE:"$$@;1"
else
ifdef CXXSRCS_$(1)
	$$(CXX) $$(OS_LDFLAGS) $$(OBJS_$(1)) $$(_LIBS) $$(OS_LIBS) -o $$@
else
	$$(CC) $$(OS_LDFLAGS) $$(OBJS_$(1)) $$(_LIBS) $$(OS_LIBS) -o $$@
endif
ifndef BUILD_DBG
ifndef BUILD_PRF
ifdef BUILD_OPT
	$$(STRIP) $$@
endif
endif
endif
endif

endef
ifdef PROGRAMS
$(foreach p,$(PROGRAMS),$(eval $(call PROGRAM_template,$(p))))
endif

$(STATIC_LIB): $(OBJS)
	@rm -f $@
ifdef WIN32
	@sh $(topsrcdir)/build/cygwin-wrapper \
	    $(AR) $(ARFLAGS) -OUT:"$@" $(OBJS) $(AR_EXTRA_ARGS)
else
	$(AR) $(ARFLAGS) $(OBJS) $(AR_EXTRA_ARGS)
ifdef RANLIB
	$(RANLIB) $@
endif
endif

$(SHARED_LIB): $(_LIB_DEPS) $(OBJS) $(RES)
	@rm -f $@
ifdef WIN32
	@sh $(topsrcdir)/build/cygwin-wrapper \
	    $(LD) $(DSO_LDFLAGS) -MANIFEST $(patsubst -l%,lib%.$(LIB_SUFFIX),$(subst -L,-LIBPATH:,$(_LIBS))) \
	      -OUT:"$@" $(OBJS) $(RES)
	@sh $(topsrcdir)/build/cygwin-wrapper \
	    $(RANLIB) -MANIFEST $@.manifest -OUTPUTRESOURCE:"$@;2"
else
ifdef CXXSRCS
	$(CXX) $(DSO_LDFLAGS) $(_LIBS) $(OBJS) $(RES) -o $@
else
	$(CC) $(DSO_LDFLAGS) $(_LIBS) $(OBJS) $(RES) -o $@
endif
ifndef BUILD_DBG
ifndef BUILD_PRF
ifdef BUILD_OPT
	$(STRIP) $@
endif
endif
endif
endif

ifdef RC
$(RES): $(RESNAME)
# The resource compiler does not understand the -U option.
ifdef WIN32
	@sh $(topsrcdir)/build/cygwin-wrapper \
	    $(RC) $(RCFLAGS) $(filter-out -U%,$(DEFINES)) $(INCLUDES) -Fo$@ $<
else
	$(RC) $(RCFLAGS) $(filter-out -U%,$(DEFINES)) $(INCLUDES:-I%=--include-dir %) -o $@ $<
endif
endif

%.$(OBJ_SUFFIX): %.cpp
ifdef WIN32
	@echo $@ ": \\" > $@.d
	@sh $(topsrcdir)/build/cygwin-wrapper -quiet \
	    $(CXX) -EP -showIncludes $(OS_CXXFLAGS) $(DEFINES) $(INCLUDES) $(call abspath,$<) 2>&1 > $@.i \
	        | grep "including" | grep -v ";" \
	        | sed -e's/^.*file:[ ]*//g' -e's/^/\"/g' -e's/$$/\"/g' -e's#^[.][.]#$(PWD)/#g' \
	        | xargs cygpath -a -s -m | xargs cygpath -u | sed -e 's/^/\t/g' -e 's/$$/ \\/g' >> $@.d
	@sh $(topsrcdir)/build/cygwin-wrapper \
	    $(CXX) -Fo$@ -c $(OS_CXXFLAGS) $(DEFINES) $(INCLUDES) $(call abspath,$<)
else
	$(CXX) -c -MMD -MP $(OS_CXXFLAGS) $(DEFINES) $(INCLUDES) $< -o $@
endif

%.$(OBJ_SUFFIX): %.c
ifdef WIN32
	@echo $@ ": \\" > $@.d
	@sh $(topsrcdir)/build/cygwin-wrapper -quiet \
	    $(CC) -EP -showIncludes $(OS_CFLAGS) $(DEFINES) $(INCLUDES) $(call abspath,$<) 2>&1 > $@.i \
	        | grep "including" | grep -v ";" \
	        | sed -e's/^.*file:[ ]*//g' -e's/^/\"/g' -e's/$$/\"/g' -e's#^[.][.]#$(PWD)/#g' \
	        | xargs cygpath -a -s -m | xargs cygpath -u | sed -e 's/^/\t/g' -e 's/$$/ \\/g' >> $@.d
	@sh $(topsrcdir)/build/cygwin-wrapper \
	    $(CC) -Fo$@ -c $(OS_CFLAGS) $(DEFINES) $(INCLUDES) $(call abspath,$<)
else
	$(CC) -c -MMD -MP $(OS_CFLAGS) $(DEFINES) $(INCLUDES) $< -o $@
endif

%.$(OBJ_SUFFIX): %.$(ASM_SUFFIX)
	$(AS) -c $(ASFLAGS) $<-o $@

%.i: %.c
	$(CPP) -C $(OS_CPPFLAGS) $(DEFINES) $(INCLUDES) $< > $@

GARBAGE         += .depend core $(wildcard core.[0-9]*)
DIST_GARBAGE    += Makefile
ALL_TRASH        = $(TARGETS) $(OBJS) $(RES) $(GARBAGE)

.PHONY: clean
clean:: $(CONFIG_DEPS)
	rm -rf $(OBJS) $(RES) $(GARBAGE)
	+$(LOOP_OVER_DIRS)

.PHONY: realclean
realclean:: $(CONFIG_DEPS)
	rm -rf $(ALL_TRASH)
	+$(LOOP_OVER_DIRS)

.PHONY: distclean
distclean:: $(CONFIG_DEPS)
	rm -rf $(ALL_TRASH) $(DIST_GARBAGE)
	+$(LOOP_OVER_DIRS)

ifneq (,$(OBJS))
ifdef WIN32
-include $(OBJS:.$(OBJ_SUFFIX)=.$(OBJ_SUFFIX).d)
else
-include $(OBJS:.$(OBJ_SUFFIX)=.d)
endif
endif

.SUFFIXES:
.SUFFIXES: .$(LIB_SUFFIX) .$(DLL_SUFFIX) .$(OBJ_SUFFIX) .c .cpp .$(ASM_SUFFIX) .h .i
